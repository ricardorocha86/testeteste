import streamlit as st
import os
import pandas as pd 
import re
from openai import OpenAI 


st.markdown('‚ú®**Conte√∫do de Aula** - selecione a aula na barra lateral e use os recursos AI ao fim do conte√∫do selecionado.')
st.divider()
def st_markdown(markdown_string):
    parts = re.split(r"!\[(.*?)\]\((.*?)\)", markdown_string)
    for i, part in enumerate(parts):
        if i % 3 == 0:
            st.markdown(part)
        elif i % 3 == 1:
            title = part
        else:
            st.image(part)  # Add caption if you want -> , caption=title)


# Fun√ß√£o para buscar arquivos markdown no diret√≥rio de aulas
def buscar_aulas(diretorio):
    return [f for f in os.listdir(diretorio) if f.endswith('.txt')]

# Fun√ß√£o para ler o conte√∫do de uma aula em markdown
def ler_aula(arquivo):
    with open(arquivo, 'r', encoding='utf-8') as f:
        return f.read()

# Diret√≥rio onde as aulas est√£o armazenadas
diretorio_aulas = 'Aulas' 

# Busca as aulas no diret√≥rio
aulas = buscar_aulas(diretorio_aulas)

def aux(x):
    return x[:-4]
# Widget de sele√ß√£o de aula
aula_selecionada = st.sidebar.selectbox('Selecione uma aula:', sorted(aulas), index = 0, format_func = aux)
 
caminho_aula = os.path.join(diretorio_aulas, aula_selecionada)
conteudo_aula = ler_aula(caminho_aula)
st_markdown(conteudo_aula)

def perfil_do_aluno(aluno):
    return f"""
        Ano de entrada no curso de Engenharia Mec√¢nica: {aluno.entrada}.
        As √°reas de interesse dentro do curso de Engenharia Mec√¢nica s√£o: {aluno.interesse}.
        O n√≠vel de conhecimento na √°rea de Ci√™ncias dos Materiais √©: {aluno.conhecimento}.
        A participa√ß√£oo em projetos pr√°ticos ou pesquisas aplicadas √©: {aluno.projetos}.
        O objetivos ao se formar √©: {aluno.objetivo}.
        O formato de estudo preferido √©: {aluno.estudo}.
        A participa√ß√£o em Atividades Extracurriculares √©: {aluno.extra}.
        A autoavalia√ß√£o do desempenho Acad√™mico √©: {aluno.desempenho}.
        As expectativas e sugest√µes em rela√ß√£o √† Disciplina de Ci√™ncia dos Materiais s√£o {aluno.expectativas}.
        """


dados = pd.read_csv('Alunos2.csv')

# Widget de sele√ß√£o de aluno
aluno_selecionado = st.sidebar.selectbox('Selecione um aluno:', sorted(dados.nome), index = 0)
aluno = dados[dados['nome'] == aluno_selecionado]
perfil = perfil_do_aluno(aluno)

dificuldade_selecionada = st.sidebar.selectbox('Selecione a dificuldade dos exerc√≠cios:', {'F√°cil', 'M√©dia', 'Dif√≠cil', 'Muito Dif√≠cil'})


st.divider()
abas = ['Exerc√≠cios AI', 'Lista de Insights AI']

aba1, aba2 = st.tabs(abas)

with aba1:
    st.header(abas[0]) 

    if st.button('‚ú® Gerar Lista de Exerc√≠cios dessa Li√ß√£o', type = 'primary'): 

        # Configura√ß√µes de API 
        openai_api_key = st.secrets["OPENAI_API_KEY"]
        client = OpenAI(api_key=openai_api_key)
        modelo = 'gpt-4o-mini'
         
        # Mensagem inicial do assistente no chat
        prompt = f"""
        Voc√™ √© um assistente de professor da disciplina Ci√™ncia dos materiais, para o curso de engenharaia, cuja tarefa √© escrever uma lista de exercicios baseado no <material de aula> abaixo. 
        N√£o se limite aos exemplos do <material de aula>, use outros exemplos que sejam pertinentes.
        Voc√™ deve fazer 3 exerc√≠cios abertos (discursivos) e 3 exerc√≠cios de teste (objetivos). Nos abertos, deve ser feita uma pergunta aberta. 
        Nos exercicios do tipo teste, deve ter uma pergunta e 4 alternativas de resposta, da qual apenas uma seja correta.
        Cada alternativa deve estar em uma linha. 
        N√£o diga qual resposta √© a correta. 
        A dificuldade dos exerc√≠cios deve ser <dificuldade>. N√£o diga qual a dificuldade do exerc√≠cio.
        Cada exerc√≠cio deve ter a maior afinidade poss√≠vel com o <perfil> do aluno abaixo, isto √©, deve ser personalizado.
        O output deve conter os 3 exercicios abertos seguidos dos 3 exercicios de teste, seguido de uma breve resolu√ß√£o dos exerc√≠cios abertos e o gabarito dos exercicios de teste, separados por sess√£o. 
        No seu output, deve contar apenas o exerc√≠cio, nada a mais, nada a menos. 
        Use formata√ß√£o quando necess√°rio, use negrito e italico para destacar o que for importante e emojis quando pertinente. 

        <material de aula>
        {conteudo_aula}
        </material de aula>

        <perfil>
        {perfil_do_aluno}
        </perfil>    

        <dificuldade>
        {dificuldade_selecionada}
        </dificuldade>    
         """ 

        # Faz uma requisi√ß√£o √† API OpenAI para gerar a resposta do assistente
        with st.chat_message("assistant", avatar = 'üë®üèº‚Äçüè´'):
            stream = client.chat.completions.create(
                model=modelo,
                messages= [{"role": "user", "content": prompt}],
                stream=True
            )

            # Exibe a resposta em tempo real
            response = st.write_stream(stream)


with aba2:
    st.header(abas[1]) 

    if st.button('‚ú® Gerar Lista de Insights dessa Aula', type = 'primary'): 

        # Configura√ß√µes de API 
        openai_api_key = st.secrets["OPENAI_API_KEY"]
        client = OpenAI(api_key=openai_api_key)
        modelo = 'gpt-4o-mini'
         
        # Mensagem inicial do assistente no chat
        prompt = f"""Voc√™ √© um assistente de professor da disciplina Ci√™ncia dos materiais, para o curso de engenharaia, que tem a fun√ß√£o de utilizar o <material de aula> e processar seguindo as seguintes instru√ß√µes:
        - Leia e compreenda integralmente o material de aula para captar o contexto, os t√≥picos abordados e a progress√£o dos conceitos.
        - Escreva um output que seja uma cole√ß√£o de 10 insights sobre a aula.
        - Use bullet points para cada insight. 
        - use texto normal nos titulos das sess√µes. 
        - cada insight deve ter no m√°ximo 140 caracteres.
        - seu output deve ser apenas, e somente apenas, a lista de insights.
        - use negrito e italico para destacar o que for importante.
        - N√£o se limite aos exemplos do <material de aula>, use outros exemplos que sejam pertinentes.
        Estes insights ainda devem ser de tal forma a correlacionar o <material de aula> com as expectativas apresentadas no <perfil> do aluno. 
         
        O material da aula √© o seguinte:
        <material de aula>
        {conteudo_aula}
        </material de aula>

        O perfil do aluno √© o seguinte:
        <perfil>
        {perfil_do_aluno}
        </perfil> 
        """

        # Faz uma requisi√ß√£o √† API OpenAI para gerar a resposta do assistente
        with st.chat_message("assistant", avatar = 'üë®üèº‚Äçüè´'):
            stream = client.chat.completions.create(
                model=modelo,
                messages= [{"role": "user", "content": prompt}],
                stream=True
            )

            # Exibe a resposta em tempo real
            response = st.write_stream(stream)
            
 
